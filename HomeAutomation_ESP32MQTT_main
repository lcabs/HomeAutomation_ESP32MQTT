/* Headers */ 
#include <WiFi.h>                 // Header para uso das funcionalidades de wi-fi do ESP32
#include <PubSubClient.h>             //  Header para uso da biblioteca PubSubClient
#include <SPI.h>
#include <Wire.h>
#include "time.h"
#include "sntp.h"
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
 
/* Defines do MQTT */
#define ID_MQTT  "ESP32_lcabs1993"          // id mqtt (para identificação de sessão)
const char* BROKER_MQTT = "broker.hivemq.com";  // URL do broker MQTT que deseja utilizar
int BROKER_PORT = 1883;             // Porta do Broker MQTT 

/* Defines do Display */
#define OLED_WIDTH 128
#define OLED_HEIGHT 64
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(OLED_WIDTH, OLED_HEIGHT);

/*  Variáveis e constantes globais */
const char* SSID =    "EG8115V5";       // SSID: nome da rede WI-FI que deseja se conectar
const char* PASSWORD =  "alpha147147";      // Senha da rede WI-FI que deseja se conectar

const char* ntpServer1 = "pool.ntp.org";
const char* ntpServer2 = "time.nist.gov";
const long  gmtOffset_sec = -14400;
const int   daylightOffset_sec = 3600;

const char* time_zone = "CET-1CEST,M3.5.0,M10.5.0/3";  // TimeZone rule for Europe/Rome including daylight adjustment rules (optional)


 /* Variáveis e objetos globais */
WiFiClient espClient;
PubSubClient MQTT(espClient);
  
//Prototypes
void init_serial(void);
//void init_display(void);            //TODO
//void init_NTP(void);
void init_wifi(void);
void init_mqtt(void);
void reconnect_wifi(void); 
void mqtt_callback(char* topic, byte* payload, unsigned int length);
void verifica_conexoes_wifi_mqtt(void);
void displayprintMQTT (void);
void checkspayload(byte* payload, char* topic);
void printLocalTime(void);
void timeavailable(struct timeval *t);

/* 
 *  Implementações das funções
 */
void setup() 
{ 
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
    display.clearDisplay();
    display.invertDisplay(true);              // Invert and restore display, pausing in-between
    delay(100);
    display.invertDisplay(false);
    delay(100);   
/*    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Welcome");  
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 40);
    display.println("System ready.");
    display.println("---------------------");
    display.println("          Press Start");
*/  display.display();

    // initialize digital pin LED_BUILTIN as an output.
    pinMode(LED_BUILTIN, OUTPUT);

  // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );
  sntp_servermode_dhcp(1);    // (optional)
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);


    
    init_serial();                // Inicia a porta serial  
 //   init_NTP();
    init_wifi();                // Conecta à rede Wifi
    init_mqtt();                // Conecta ao broker MQTT


}
  
/* Função: inicializa comunicação serial com baudrate 115200 (para fins de monitorar no terminal serial 
*          o que está acontecendo.
* Parâmetros: nenhum
* Retorno: nenhum
*/
void init_serial() 
{
    Serial.begin(115200);
  Serial.println("Serial inicializada.");
}
 
 /* Função: inicializa o display.
* Parâmetros: nenhum
* Retorno: nenhum

void init_display() 
{
// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {    //Ive changed the address //already chill
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);                      // Don't proceed, loop forever
  }  
  display.clearDisplay();               // Clear the buffer 
  display.invertDisplay(true);              // Invert and restore display, pausing in-between
  delay(1000);
  display.invertDisplay(false);
  delay(1000);   
}
*/ 
 /*
void init_ntp(void) 
{
  // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );
  sntp_servermode_dhcp(1);    // (optional)
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);
}
*/
 
/* Função: inicializa e conecta-se na rede WI-FI desejada
 * Parâmetros: nenhum
 * Retorno: nenhum
 */
void init_wifi(void) 
{
    delay(10);
    Serial.println("------Conexao WI-FI------");
    Serial.print("Conectando-se na rede: ");
    Serial.println(SSID);
    Serial.println("Aguarde");
    reconnect_wifi();
}
  
/* Função: inicializa parâmetros de conexão MQTT(endereço do  
 *         broker, porta e seta função de callback)
 * Parâmetros: nenhum
 * Retorno: nenhum
 */
void init_mqtt(void) 
{
    MQTT.setServer(BROKER_MQTT, BROKER_PORT);       // informa a qual broker e porta deve ser conectado
    MQTT.setCallback(mqtt_callback);              // atribui função de callback
}
  
/* Função: função de callback 
 *          esta função é chamada toda vez que uma informação de 
 *          um dos tópicos subscritos chega
 * Parâmetros: nenhum
 * Retorno: nenhum
 * */
void mqtt_callback(char* topic, byte* payload, unsigned int length) 
{
    String msg;
    for(int i = 0; i < length; i++)          //obtem a string do payload recebido
    {
       char c = (char)payload[i];
       msg += c;
    }
    Serial.print("[MQTT] Mensagem recebida: ");
    Serial.println(msg);  
        
    Serial.print("Topico: ");
    Serial.println(topic); 
/*
    char mensagem[length];
        for(int j = 0; j < length; j++)          //obtem a string do payload recebido
    {
       char d = msg[j];
       mensagem += d;
    }
    
  */  
  checkspayload(msg, topic);
//  displayprintMQTT(topic);
}
  
/* Função: reconecta-se ao broker MQTT (caso ainda não esteja conectado ou em caso de a conexão cair)
 *          em caso de sucesso na conexão ou reconexão, o subscribe dos tópicos é refeito.
 * Parâmetros: nenhum
 * Retorno: nenhum
 */
void reconnect_mqtt(void) 
{
    while (!MQTT.connected()) 
    {
        Serial.print("* Tentando se conectar ao Broker MQTT: ");
        Serial.println(BROKER_MQTT);
        if (MQTT.connect(ID_MQTT)) 
        {
            Serial.println("Conectado com sucesso ao broker MQTT!");
            MQTT.publish("lcabs1993/arduino", "Reconectado!");
            MQTT.subscribe("lcabs1993");
            MQTT.subscribe("lcabs1993/arduino");
            MQTT.subscribe("lcabs1993/arduino/buzzer");
            MQTT.subscribe("lcabs1993/arduino/led");
            MQTT.subscribe("lcabs1993/arduino/dht11/temp");
            MQTT.subscribe("lcabs1993/arduino/dht11/humidade");
            MQTT.subscribe("lcabs1993/arduino/PIR01");      
        } 
        else
        {
            Serial.println("Falha ao reconectar ao broker.");
            Serial.println("Tentando reconectar em 2s...");
            delay(2000);
        }
    }
}
  
/* Função: reconecta-se ao WiFi
 * Parâmetros: nenhum
 * Retorno: nenhum
*/
void reconnect_wifi() 
{
    // se já está conectado a rede WI-FI, nada é feito. Caso contrário, são efetuadas tentativas de conexão
    if (WiFi.status() == WL_CONNECTED)
        return;
         
    WiFi.begin(SSID, PASSWORD);
     
    while (WiFi.status() != WL_CONNECTED) 
    {
        delay(100);
        Serial.print(".");
    }  
    Serial.println();
    Serial.print("Conectado com sucesso na rede "); 
    Serial.print(SSID);
    Serial.println("IP obtido: ");
    Serial.println(WiFi.localIP());
}
 
/* Função: verifica o estado das conexões WiFI e ao broker MQTT. 
 *         Em caso de desconexão (qualquer uma das duas), a conexão
 *         é refeita.
 * Parâmetros: nenhum
 * Retorno: nenhum
 */
void verifica_conexoes_wifi_mqtt(void)
{
    reconnect_wifi();                     // se não há conexão com o WiFI, a conexão é refeita 
    if (!MQTT.connected())                // se não há conexão com o Broker, a conexão é refeita
        reconnect_mqtt(); 
} 

void displayprintMQTT(char* topic){  
  display.clearDisplay();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("MQTT!");
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 17);
  display.println("Mensagem recebida no");
  display.println("topico:");
  display.println(topic);
  display.display();
  }

void checkspayload(String msg, char* topic){

  if (msg == "buzzeron")
    {
//      int n = WiFi.scanNetworks();
      Serial.println("Deu certo: BuzzerON!");
      digitalWrite(LED_BUILTIN, HIGH);     
    } else if (msg == "buzzeroff")
    {
      Serial.println("Deu certo: BuzzerOFF!");
      digitalWrite(LED_BUILTIN, LOW);  
    }

else if (msg == "scan")
    {
      int n = WiFi.scanNetworks();
      display.clearDisplay();
      display.setTextSize(2);
      display.setTextColor(WHITE);
      display.setCursor(20, 20);
      display.println(n);
      Serial.print(n);
      display.setTextSize(1);
      Serial.println(" networks found.");
      display.println("    ");
      display.println(" networks found.");
      digitalWrite(LED_BUILTIN, LOW);  
      display.display(); 
      delay(2000);
    }

else if (msg == "time")
    {
      printLocalTime();
      display.clearDisplay();
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.setTextSize(1);
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  display.println(&timeinfo, "%A, \n%B %d %Y \n%H:%M:%S");
      display.display(); 
      delay(2000);
    }

  Serial.println(msg);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("MQTT!");
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 17);
  display.println("Mensagem recebida:");
  display.println(msg);
  display.display();
  display.setCursor(0, 37);
  display.println("topico:");
  display.println(topic);
  display.display(); 
    
  };

void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

void timeavailable(struct timeval *t)
{
  Serial.println("Got time adjustment from NTP!");
  printLocalTime();
}


class screen 
  {
    public:

    int screennumber;

 
  };

 
/* programa principal */
void loop() 
{   
    /* garante funcionamento das conexões WiFi e ao broker MQTT */
    verifica_conexoes_wifi_mqtt();

    /* Printa a mensagem recebida por MQTT na tela */

    
    /* Envia frase ao broker MQTT */
    //MQTT.publish("lcabs1993/arduino", "ESP32 se comunicando com MQTT");
 
    /* keep-alive da comunicação com broker MQTT */    
    MQTT.loop();
    /* Agurda 1 segundo para próximo envio */
    delay(1000);   
}
